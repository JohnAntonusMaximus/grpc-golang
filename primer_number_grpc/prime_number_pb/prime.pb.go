// Code generated by protoc-gen-go. DO NOT EDIT.
// source: prime.proto

/*
Package prime is a generated protocol buffer package.

It is generated from these files:
	prime.proto

It has these top-level messages:
	PrimeStreamRequest
	PrimeStreamResponse
*/
package prime

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PrimeStreamRequest struct {
	Factor int32 `protobuf:"varint,1,opt,name=factor" json:"factor,omitempty"`
}

func (m *PrimeStreamRequest) Reset()                    { *m = PrimeStreamRequest{} }
func (m *PrimeStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*PrimeStreamRequest) ProtoMessage()               {}
func (*PrimeStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PrimeStreamRequest) GetFactor() int32 {
	if m != nil {
		return m.Factor
	}
	return 0
}

type PrimeStreamResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *PrimeStreamResponse) Reset()                    { *m = PrimeStreamResponse{} }
func (m *PrimeStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*PrimeStreamResponse) ProtoMessage()               {}
func (*PrimeStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PrimeStreamResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*PrimeStreamRequest)(nil), "prime.PrimeStreamRequest")
	proto.RegisterType((*PrimeStreamResponse)(nil), "prime.PrimeStreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PrimeStreamService service

type PrimeStreamServiceClient interface {
	GetPrimeFactors(ctx context.Context, in *PrimeStreamRequest, opts ...grpc.CallOption) (PrimeStreamService_GetPrimeFactorsClient, error)
}

type primeStreamServiceClient struct {
	cc *grpc.ClientConn
}

func NewPrimeStreamServiceClient(cc *grpc.ClientConn) PrimeStreamServiceClient {
	return &primeStreamServiceClient{cc}
}

func (c *primeStreamServiceClient) GetPrimeFactors(ctx context.Context, in *PrimeStreamRequest, opts ...grpc.CallOption) (PrimeStreamService_GetPrimeFactorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PrimeStreamService_serviceDesc.Streams[0], c.cc, "/prime.PrimeStreamService/GetPrimeFactors", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeStreamServiceGetPrimeFactorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeStreamService_GetPrimeFactorsClient interface {
	Recv() (*PrimeStreamResponse, error)
	grpc.ClientStream
}

type primeStreamServiceGetPrimeFactorsClient struct {
	grpc.ClientStream
}

func (x *primeStreamServiceGetPrimeFactorsClient) Recv() (*PrimeStreamResponse, error) {
	m := new(PrimeStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PrimeStreamService service

type PrimeStreamServiceServer interface {
	GetPrimeFactors(*PrimeStreamRequest, PrimeStreamService_GetPrimeFactorsServer) error
}

func RegisterPrimeStreamServiceServer(s *grpc.Server, srv PrimeStreamServiceServer) {
	s.RegisterService(&_PrimeStreamService_serviceDesc, srv)
}

func _PrimeStreamService_GetPrimeFactors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeStreamServiceServer).GetPrimeFactors(m, &primeStreamServiceGetPrimeFactorsServer{stream})
}

type PrimeStreamService_GetPrimeFactorsServer interface {
	Send(*PrimeStreamResponse) error
	grpc.ServerStream
}

type primeStreamServiceGetPrimeFactorsServer struct {
	grpc.ServerStream
}

func (x *primeStreamServiceGetPrimeFactorsServer) Send(m *PrimeStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PrimeStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prime.PrimeStreamService",
	HandlerType: (*PrimeStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPrimeFactors",
			Handler:       _PrimeStreamService_GetPrimeFactors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prime.proto",
}

func init() { proto.RegisterFile("prime.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xca, 0xcc,
	0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x74, 0xb8, 0x84, 0x02,
	0x40, 0x8c, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0xdc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21,
	0x31, 0x2e, 0xb6, 0xb4, 0xc4, 0xe4, 0x92, 0xfc, 0x22, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20,
	0x28, 0x4f, 0x49, 0x97, 0x4b, 0x18, 0x45, 0x75, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x48, 0x79,
	0x51, 0x6a, 0x71, 0x69, 0x4e, 0x09, 0x4c, 0x39, 0x84, 0x67, 0x94, 0x84, 0x62, 0x78, 0x70, 0x6a,
	0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x0f, 0x17, 0xbf, 0x7b, 0x6a, 0x09, 0x58, 0xc2, 0x0d, 0x6c,
	0x6c, 0xb1, 0x90, 0xa4, 0x1e, 0xc4, 0x69, 0x98, 0x4e, 0x91, 0x92, 0xc2, 0x26, 0x05, 0xb1, 0x57,
	0x89, 0xc1, 0x80, 0xd1, 0x89, 0x3d, 0x0a, 0xe2, 0x93, 0x24, 0x36, 0xb0, 0xbf, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xab, 0x2e, 0x5f, 0x59, 0xe6, 0x00, 0x00, 0x00,
}
